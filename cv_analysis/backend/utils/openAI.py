import openai
import config


class OpenAIClient:
    """
    A client class to interact with OpenAI's ChatCompletion API for various text processing tasks.

    This class provides methods to compare texts, extract contact information from CVs,
    and clean/extract meaningful text from raw PDF content using OpenAI's GPT models.
    """

    def __init__(self, engine):
        """
        Initializes the OpenAIClient with the specified OpenAI engine.

        Args:
            engine (str): The OpenAI engine/model to be used for generating completions.
        """
        self.engine = engine

    def compare_texts(self, input_text, system_message):
        """
        Compares two texts by generating a response from the OpenAI ChatCompletion API.

        This method sends a system message and user input to the OpenAI API to obtain a comparison result.

        Args:
            input_text (str): The text input provided by the user for comparison.
            system_message (str): The system-level instruction guiding the comparison process.

        Returns:
            str: The comparison result generated by the OpenAI model. Returns an error message if an exception occurs.
        """
        try:
            response = openai.ChatCompletion.create(
                engine=self.engine,
                messages=[
                    {"role": "system", "content": system_message},
                    {"role": "user", "content": input_text}
                ],
                max_tokens=3000
            )
            comparison_result = response['choices'][0]['message']['content']
            return comparison_result
        except Exception as e:
            config.app_logger.error(f"Error comparing summaries: {str(e)}")
            return "Error comparing summaries."

    def extract_contact_info(self, cv_text):
        """
        Extracts contact information (email, phone number, address) from a given CV text.

        This method sends a predefined system message along with the CV text to the OpenAI API
        to extract relevant contact details.

        Args:
            cv_text (str): The raw text content of the CV from which contact information is to be extracted.

        Returns:
            str: The extracted contact information. Returns an error message if an exception occurs.
        """
        system_message = "Extract the contact information (email, phone number, address) from the following text."
        try:
            response = openai.ChatCompletion.create(
                engine=self.engine,
                messages=[
                    {"role": "system", "content": system_message},
                    {"role": "user", "content": cv_text}
                ],
                max_tokens=1500
            )
            contact_info = response['choices'][0]['message']['content']
            return contact_info
        except Exception as e:
            config.app_logger.error(f"Error extracting contact info: {str(e)}")
            return "Error extracting contact info."

    def extract_text_using_gpt(self, pdf_raw_text):
        """
        Cleans and extracts meaningful text from raw PDF content.

        This method sends a predefined system message along with the raw PDF text to the OpenAI API
        to obtain a cleaned and meaningful version of the text.

        Args:
            pdf_raw_text (str): The raw text content extracted from a PDF file.

        Returns:
            str: The cleaned and meaningful text extracted from the PDF. Returns an error message if an exception occurs.
        """
        system_message = "Clean and extract the meaningful text from the following PDF content."
        try:
            response = openai.ChatCompletion.create(
                engine=self.engine,
                messages=[
                    {"role": "system", "content": system_message},
                    {"role": "user", "content": pdf_raw_text}
                ],
                max_tokens=2000
            )
            cleaned_text = response['choices'][0]['message']['content']
            return cleaned_text
        except Exception as e:
            config.app_logger.error(f"Error extracting text using GPT: {str(e)}")
            return "Error extracting text."
